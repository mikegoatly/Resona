<Project Sdk="Microsoft.NET.Sdk.Web">
	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net9.0</TargetFramework>
		<Nullable>enable</Nullable>
		<BuiltInComInteropSupport>true</BuiltInComInteropSupport>
		<AssemblyName>Resona</AssemblyName>
		<LangVersion>latest</LangVersion>
		
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<SpaRoot>ClientApp\</SpaRoot>
		<SpaProxyServerUrl>http://localhost:5002</SpaProxyServerUrl>
		<SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>

		<AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
	</PropertyGroup>

	<ItemGroup>
		<TrimmerRootDescriptor Include="Roots.xml" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<TreatWarningsAsErrors>True</TreatWarningsAsErrors>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<TreatWarningsAsErrors>True</TreatWarningsAsErrors>
	</PropertyGroup>

	<ItemGroup>
		<AvaloniaResource Include="Assets\**" />
		<AvaloniaResource Remove="Assets\acme.woff2" />
		<None Remove=".gitignore" />
		<None Remove="Assets\acme.woff2" />
		<None Remove="Fonts\Acme-Regular.ttf" />
		<None Remove="Images\audiobooks.png" />
		<None Remove="Images\music.png" />
		<None Remove="Images\sleep.png" />
	</ItemGroup>

	<ItemGroup>
		<AvaloniaResource Include="Images\audiobooks.png">
			<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		</AvaloniaResource>
		<AvaloniaResource Include="Images\music.png">
			<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		</AvaloniaResource>
		<AvaloniaResource Include="Images\sleep.png">
			<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		</AvaloniaResource>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Avalonia" Version="11.1.3" />
		<PackageReference Include="Avalonia.LinuxFramebuffer" Version="11.1.3" />
		<PackageReference Include="Avalonia.Themes.Fluent" Version="11.1.3" />
		<PackageReference Include="Avalonia.Xaml.Behaviors" Version="11.1.0" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.8">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="ReactiveUI.Fody" Version="19.5.41" />
		<PackageReference Include="Avalonia.Desktop" Version="11.1.3" />
		<PackageReference Include="Avalonia.Controls.ItemsRepeater" Version="11.1.3" />
		<!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
		<PackageReference Condition="'$(Configuration)' == 'Debug'" Include="Avalonia.Diagnostics" Version="11.1.3" />
		<PackageReference Include="Projektanker.Icons.Avalonia.FontAwesome" Version="9.4.0" />
		<PackageReference Include="Avalonia.ReactiveUI" Version="11.1.3" />
		<PackageReference Include="Splat.Microsoft.Extensions.DependencyInjection" Version="15.1.1" />
		<PackageReference Include="Splat.Serilog" Version="15.1.1" />
		<PackageReference Include="Microsoft.AspNetCore.SpaProxy" Version="8.0.8" />
	</ItemGroup>

	<ItemGroup>
		<!-- Don't publish the SPA source files, but do show them in the project files list -->
		<Content Remove="$(SpaRoot)**" />
		<None Remove="$(SpaRoot)**" />
		<None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="Fonts\Acme-Regular.ttf" />
	</ItemGroup>
	<ItemGroup>
		<ProjectReference Include="..\Resona.Services\Resona.Services.csproj" />
	</ItemGroup>
	<ItemGroup>
		<Compile Update="Properties\Resources.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resources.resx</DependentUpon>
		</Compile>
		<Compile Update="Views\PlayerControlsView.axaml.cs">
			<DependentUpon>PlayerControlsView.axaml</DependentUpon>
		</Compile>
		<Compile Update="Views\PowerOptions.axaml.cs">
			<DependentUpon>PowerOptions.axaml</DependentUpon>
		</Compile>
		<Compile Update="Views\Settings\AdvancedSettingsView.axaml.cs">
			<DependentUpon>AdvancedSettingsView.axaml</DependentUpon>
		</Compile>
		<Compile Update="Views\BatteryView.axaml.cs">
		  <DependentUpon>BatteryView.axaml</DependentUpon>
		</Compile>
	</ItemGroup>
	<ItemGroup>
		<EmbeddedResource Update="Properties\Resources.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resources.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>

	<ItemGroup Condition="'$(RuntimeIdentifier)'=='linux-arm' or '$(RuntimeIdentifier)'==''">
		<Content Include="Bass\linux_arm\**">
			<Link>%(Filename)%(Extension)</Link>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
	</ItemGroup>

	<ItemGroup Condition="'$(RuntimeIdentifier)'=='win-x64' or '$(RuntimeIdentifier)'==''">
		<Content Include="Bass\win_x64\**">
			<Link>%(Filename)%(Extension)</Link>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
	</ItemGroup>

	<ItemGroup>
	  <Folder Include="ClientApp\src\components\" />
	</ItemGroup>

	<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	</Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish" Condition=" '$(NoSpaBuild)' != 'true' ">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build" />

		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>

</Project>
