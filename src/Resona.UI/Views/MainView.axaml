<UserControl
    x:Class="Resona.UI.Views.MainView"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="using:Resona.UI.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
    xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
    xmlns:icon="clr-namespace:Projektanker.Icons.Avalonia;assembly=Projektanker.Icons.Avalonia"
    xmlns:local="using:Resona.UI.Views"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:rxui="clr-namespace:Avalonia.ReactiveUI;assembly=Avalonia.ReactiveUI"
    xmlns:vm="using:Resona.UI.ViewModels"
    x:Name="Root"
    d:DesignHeight="450"
    d:DesignWidth="800"
    x:CompileBindings="True"
    x:DataType="vm:MainWindowViewModel"
    mc:Ignorable="d">
    <Design.DataContext>
        <vm:MainWindowViewModel />
    </Design.DataContext>

    <UserControl.Resources>
        <converters:DoubleToIsVisibleConverter x:Key="DoubleToIsVisibleConverter" />
    </UserControl.Resources>

    <Grid Background="Transparent">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <i:Interaction.Behaviors>
            <ia:EventTriggerBehavior EventName="PointerMoved">
                <ia:InvokeCommandAction Command="{Binding ScreenInteraction}" />
            </ia:EventTriggerBehavior>
            <ia:EventTriggerBehavior EventName="PointerPressed">
                <ia:InvokeCommandAction Command="{Binding ScreenInteraction}" />
            </ia:EventTriggerBehavior>
        </i:Interaction.Behaviors>


        <rxui:RoutedViewHost Router="{Binding Router}">
            <rxui:RoutedViewHost.PageTransition>
                <CompositePageTransition>
                    <CrossFade Duration="0:00:00.100" />
                </CompositePageTransition>
            </rxui:RoutedViewHost.PageTransition>
        </rxui:RoutedViewHost>

        <DockPanel Margin="15" LastChildFill="True">
            <DockPanel.Styles>
                <Style Selector="DockPanel > :is(Control)">
                    <Setter Property="Margin" Value="2" />
                </Style>
                <Style Selector="DockPanel > TextBlock">
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
            </DockPanel.Styles>

            <Button
                VerticalAlignment="Top"
                Classes="primary circle bounce"
                Classes.bounce-hidden="{Binding !CanGoBack}"
                Classes.bounce-visible="{Binding CanGoBack}"
                Command="{Binding GoBack}">
                <!--
                    Default the back button to scaled out so it doesn't appear
                    for a short time when the app loads
                -->
                <Button.RenderTransform>
                    <ScaleTransform ScaleX="0" ScaleY="0" />
                </Button.RenderTransform>
                <icon:Icon Value="fa fa-arrow-left" />
            </Button>

            <Grid HorizontalAlignment="Right" VerticalAlignment="Stretch">

                <Grid VerticalAlignment="Top" ColumnDefinitions="*,Auto">
                    <Button Grid.Column="1" Classes="danger circle">
                        <icon:Icon Value="fa fa-power-off" />
                        <Button.Flyout>
                            <Flyout Placement="BottomEdgeAlignedRight">
                                <local:PowerOptions />
                            </Flyout>
                        </Button.Flyout>
                    </Button>
                    <local:BatteryView
                        Grid.Column="0"
                        Margin="0,0,5,0"
                        VerticalAlignment="Top" />
                </Grid>
                <Button
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Classes="secondary circle"
                    Classes.bounce-hidden="{Binding !ShowSettingsButton}"
                    Classes.bounce-visible="{Binding ShowSettingsButton}"
                    Command="{Binding NavigateToSettingsCommand}">
                    <icon:Icon Value="fa fa-gear" />
                </Button>
            </Grid>
        </DockPanel>

        <local:PlayerControlsView Grid.Row="1" />

        <!--
            The screen dim display is shown over the other controls. It accepts hit testing because we don't
            want users to accidentally click on a button when trying to clear it.
        -->
        <Border
            Grid.RowSpan="2"
            Background="Black"
            IsVisible="{Binding ScreenDimPercentage, Converter={StaticResource DoubleToIsVisibleConverter}}"
            Opacity="{Binding ScreenDimPercentage}">
            <i:Interaction.Behaviors>
                <ia:EventTriggerBehavior EventName="PointerMoved">
                    <ia:InvokeCommandAction Command="{Binding ScreenInteraction}" />
                </ia:EventTriggerBehavior>
                <ia:EventTriggerBehavior EventName="PointerPressed">
                    <ia:InvokeCommandAction Command="{Binding ScreenInteraction}" />
                </ia:EventTriggerBehavior>
            </i:Interaction.Behaviors>
            <Border.Transitions>
                <Transitions>
                    <DoubleTransition Property="Opacity" Duration="0:00:00.100" />
                </Transitions>
            </Border.Transitions>
        </Border>
    </Grid>
</UserControl>